Python Repository Network tool
==============================

I am a tool to help your interactions with Python package repositories.
I can copy packages between repos for you without modifying any config files.

There are three types of repos I support, probably this covers all you might need:

- https://pypi.python.org - the global python public package repo
- ~/.pip/local - a directory with package files, for fast/offline development
- project specific PyPI server - defined by you or your company, for deployment

I provide a shell-like environment as primary interface - with completion for commands and parameters, but can be used as a command-line tool as well.

I support the following commands:

use
---

Creates/overwrites a `pip.conf` config file, for use by the outer environment: installing packages with `pip` can be greatly influenced by the `~/.pip/pip.conf` configuration file: it defines which repo is used to download from (`index-url` or `find-links`) and how (`no-use-wheels`, etc.)

```
use repo
```


copy
----

Copy packages like files with `cp`.

```
copy [LOCAL-FILE [...]] [REPO:PACKAGE [...]] DESTINATION
```

It is important, that `LOCAL-FILE`s to be uploaded should come before any `REPO` specification!

`DESTINATION` can be either a `REPO:` or a `LOCAL-DIRECTORY`


define
------

Introduces a new repository.

```
define repo download-url [upload-url username password]
```


set
---

Sets a repository parameter.

```
set repo key=value
```


setup_for_pypi_python_org
-------------------------

Sets both the download and the upload urls to https://pypi.python.org.


setup_for_pip_local
-------------------

Sets directory to `~/.pip/local` and makes that directory if needed.


forget
------

Makes a known repository unknown.

```
forget repo
```


list
----

Lists known repositories.


show
----

Shows repository attributes

```
show repo
```


Developers
==========

Internals:

- packages are downloaded with [pip](http://www.pip-installer.org).
- packages are uploaded with code adopted from [twine](https://pypi.python.org/pypi/twine).

Guidelines:

- all code should be extremely simple and clear
- all features require unit tests
- zero messages from flake8

Contributions

- reporting issues
- improving documentation
- improving on the simplicity and clarity of the code
- adding relevant tests
- providing new badly missing features (preferably with tests)

are welcome.
