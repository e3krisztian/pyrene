Python Repository Network tool
==============================

I am a tool to help your interactions with Python package repositories.
I can copy packages between repos for you without modifying any config files.

There are two types of repos I support, probably this covers with their variants all you might need:

- http repos
    - https://pypi.python.org - the global python public package repo
    - project specific PyPI server - defined by you or your company, for deployment
- directory repos
    - a directory with package files, for fast/offline development
    - `~/.pip/local` - one such directory

I provide a shell-like environment as primary interface - with completion for commands and attributes, but I can be used as a command-line tool as well.


Installation
============

`master` branch is always the latest release, so it is safe to install with

```shell
mkvirtualenv pyrene
pip install git+https://github.com/krisztianfekete/pyrene.git
```


Usage
=====

I support the following commands:

copy
----

Copy packages with the same ease like local files with `cp` (or remote with `rsync`!).

```
Pyrene: copy [LOCAL-FILE [...]] [REPO:PACKAGE [...]] DESTINATION
```

It is important, that `LOCAL-FILE`s to be uploaded should come before any `REPO` specification!

`DESTINATION` can be either a `REPO:` or a `LOCAL-DIRECTORY`

list
----

Lists known repositories.

show
----

Shows repository attributes

```
Pyrene: show repo
```

define
------

Introduces a new repository.

```
Pyrene: define repo
Pyrene: list
  repo
```

set
---

Sets a repository attribute.

```
Pyrene: set repo attribute=value
Pyrene: show repo
  attribute: value
```

unset
-----

Removes a repository attribute

```
Pyrene: show repo
  attribute: value
Pyrene: unset repo attribute
Pyrene: show repo
```

forget
------

Makes a known repository unknown.

```
Pyrene: forget repo
Pyrene: list
```

setup_for_pypi_python_org
-------------------------

Configures repo to point to the default package index https://pypi.python.org.

```
Pyrene: setup_for_pip_local pypi
Pyrene: show pypi
  upload_url: https://pypi.python.org/
  type: http
  download_url: https://pypi.python.org/simple/
```

setup_for_pip_local
-------------------

Configures repo to be directory based and sets directory to `~/.pip/local`.
Also makes that directory if needed.

```
Pyrene: setup_for_pip_local local
Pyrene: show local
  directory: /home/user/.pip/local
  type: directory
```

write_pip_conf_for
------------------

The working of `pip` can be greatly influenced by the `~/.pip/pip.conf` configuration file: it defines which repo is used to download from (`index-url` or `find-links`) and how (`no-use-wheels`, etc.)

I'll create a minimal `pip.conf` config file (or overwrite silently the existing one) so that pip will use the named Pyrene defined repo outside of `Pyrene` for downloads: 

```
Pyrene: write_pip_conf_for repo
```


Developers
==========

Development is done using `git flow` on branch `develop`, `master` is the release branch.

Internals:

- packages are downloaded with [pip](http://www.pip-installer.org).
- packages are uploaded with code adopted from [twine](https://pypi.python.org/pypi/twine), though unfortunately `twine` is not used directly.
- local packages are served with [pypi-server](https://pypi.python.org/pypi/pypiserver)

Guidelines:

- all code should be extremely simple and clear
- all features require unit tests
- zero messages from flake8

Contributions

- reporting issues
- improving documentation
- improving on the simplicity and clarity of the code
- adding relevant tests
- providing new badly missing features (preferably with tests)

are welcome.
